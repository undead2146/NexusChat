using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;
using NexusChat.Core.ViewModels;

namespace NexusChat.Views.Pages
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class AIModelsPage : ContentPage
    {
        private readonly AIModelsViewModel _viewModel;
        private bool _isFirstLoad = true;
        private readonly Stopwatch _loadTimer = new Stopwatch();
        private DateTime _lastFilterTime = DateTime.MinValue;
        private readonly int _debounceMs = 300; // Debounce time in milliseconds

        public AIModelsPage(AIModelsViewModel viewModel)
        {
            try
            {
                _loadTimer.Start();
                Debug.WriteLine("AIModelsPage: Initializing");
                
                // This line is generated by the XAML compiler
                InitializeComponent();
                
                _viewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
                BindingContext = _viewModel;
                
                // Start preloading models in the constructor to save time
                Task.Run(() => PreloadModelsAsync());
                
                Debug.WriteLine("AIModelsPage: Initialize complete");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in AIModelsPage constructor: {ex.Message}");
                Debug.WriteLine(ex.StackTrace);
            }
        }

        // Direct back button handler for navigation reliability
        private async void BackButton_Clicked(object sender, EventArgs e)
        {
            try
            {
                await SaveModelStatesAsync();
                await Shell.Current.GoToAsync("..");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error navigating back: {ex.Message}");
                // Fallback method if Shell navigation fails
                await Navigation.PopAsync();
            }
        }

        // Preload models in the background to improve perceived performance
        private async Task PreloadModelsAsync()
        {
            try
            {
                if (!_viewModel.IsInitialized)
                {
                    await _viewModel.InitializeAsync();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error preloading models: {ex.Message}");
            }
        }

        protected override void OnAppearing()
        {
            try
            {
                base.OnAppearing();
                
                if (_isFirstLoad)
                {
                    _isFirstLoad = false;
                    
                    // Use Task.Run to avoid blocking UI thread during page appearance
                    Task.Run(async () =>
                    {
                        // If models weren't preloaded yet, do it now
                        if (!_viewModel.IsInitialized)
                        {
                            await _viewModel.InitializeAsync();
                        }
                        
                        // Log timing information
                        _loadTimer.Stop();
                        Debug.WriteLine($"AIModelsPage: View model initialized with {_viewModel.Models?.Count ?? 0} models in {_loadTimer.ElapsedMilliseconds}ms");
                    });
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in AIModelsPage OnAppearing: {ex.Message}");
            }
        }
        
        protected override async void OnDisappearing()
        {
            try
            {
                base.OnDisappearing();
                
                // Save model states when leaving the page
                await SaveModelStatesAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in AIModelsPage OnDisappearing: {ex.Message}");
            }
        }
        
        // Helper method to save model states
        private async Task SaveModelStatesAsync()
        {
            try
            {
                Debug.WriteLine("AIModelsPage: Saving model states...");
                
                // Persist the model states to database
                if (_viewModel != null && _viewModel.IsInitialized)
                {
                    await _viewModel.PersistModelStatesAsync();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving model states: {ex.Message}");
            }
        }

        // Handle text changed events for real-time search with debounce
        private void SearchBar_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                _lastFilterTime = DateTime.Now;
                
                // Use debounce pattern to avoid excessive filtering
                Task.Delay(_debounceMs).ContinueWith(t =>
                {
                    // Only execute if this is still the most recent filter request
                    if ((DateTime.Now - _lastFilterTime).TotalMilliseconds >= _debounceMs)
                    {
                        MainThread.BeginInvokeOnMainThread(() =>
                        {
                            if (_viewModel.FilterModelsCommand.CanExecute(null))
                            {
                                _viewModel.FilterModelsCommand.Execute(null);
                            }
                        });
                    }
                });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error filtering models: {ex.Message}");
            }
        }
    }
}



